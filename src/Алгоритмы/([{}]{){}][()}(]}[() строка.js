//?Дана случайная последовательность скобок, нужно вернуть true,
//?если валидная последовательность(например: ({[]})), false - невалидная (например: ({)})
//! Алгоритм:
//! Если рядом стоят 2 скобки () {} [], то такая подпоследовательность валидна,
//! значит можно убрать их из последовательности и так по всей строке.
//! Если не останется в конце ниодной пары, то последовательность валидна.

//! Будем добавлять в стек каждый элемент последовательности, если добавляется открывающая скобка,
//! то просто добавляем его, если нам попадается закрывающаяся скобка,
//! то сравниваем ее по типу с последним добавленным элементом в стеке, если они одного типа,
//! то отбрасываем их, если встречается пара разных типов => последовательность невалидна.

let s1 = "()", //true
    s2 = "()[]{}", //true
    s3 = "{]", //false
    s4 = "{[]}", //true
    s5 = "{[)]", //false
    s6 = "{[[]{}]}()()"; //true

function isValid(s) {
    let stack = [];
    let brackets = {
        ")": "(",
        "}": "{",
        "]": "[",
    };
    for (let i = 0; i < s.length; i++) {
        const current = s[i];

        if (isClosedBracket(current)) {
            if (brackets[current] !== stack.pop()) return false;
        } else {
            stack.push(current);
        }
    }
    return stack.length === 0;
}

function isClosedBracket(ch) {
    return [")", "}", "]"].includes(ch);
}

console.log(isValid(s6));
